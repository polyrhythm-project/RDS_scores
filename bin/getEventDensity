#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Mon Aug 30 20:54:32 CEST 2021
# Last Modified: Mon Aug 30 20:54:35 CEST 2021
# Filename:      getEventDensity
# Syntax:        perl 5
#
# Description:   Number of composite events divided by duration of example in seconds.
#

use strict;
use Getopt::Long;

my $composite = `which composite`;
chomp $composite;
die "Cannot find composite tool.  Install humlib (https://github.com/craigsapp/humlib)\n" if $composite =~ /^\s*$/;

my $extract = `which extractx`;
chomp $extract;
die "Cannot find extractx tool.  Install humextras (https://github.com/craigsapp/humextra)\n" if $extract =~ /^\s*$/;

my $rid = `which ridx`;
chomp $rid;
die "Cannot find ridx tool.  Install humextras (https://github.com/craigsapp/humextra)\n" if $rid =~ /^\s*$/;

my $audioDuration;  # duration in seconds if not extracting from file.
my $verboseQ = 0;   # -v will list the composite event counts and the durations in seconds used for calculations

Getopt::Long::Configure("bundling");
GetOptions (
   'v|verbose' => \$verboseQ,
   'd|s|audio-duration|seconds=s' => \$audioDuration
);

my @files = sort @ARGV;

die "No input files.\n" if @files == 0;

for my $file (@files) {
	process($file);
}


##############################
##
## process -- extract data and calculate score
## 
## !!!excerpt-duration-sec: 5
##

sub process {
	my ($file) = @_;
	my $compositeNotes = `$composite $file | $extract -i kern-comp | $extract -s 1 | $rid -H | grep -v r | grep -v '[]_]' | wc -l`;
	# grep -v r removes rests
	# grep -v '[[]_]' removes secondary tied notes (keeping note attacks of tied notes).
	chomp $compositeNotes;
	$compositeNotes =~ s/^\s+//;
	$compositeNotes =~ s/\s+$//;
	my $excerptDuration = $audioDuration;
	my $seconds = $audioDuration;
	if ($excerptDuration =~ s/^\s*$//) {
		$excerptDuration = `grep "^!!!excerpt-duration-sec:" $file`;
		chomp $excerptDuration;
		if ($excerptDuration !~ /^!!!excerpt-duration-sec:\s*(.+)\s*$/) {
			die "problem on line $excerptDuration in file $file\n";
		}
		$seconds = $1;
		$seconds =~ s/^\s+//;
		$seconds =~ s/\s+$//;
	}
	my $value = $compositeNotes / $seconds;
	# Round the value to one decimal digit:
	$value = int($value * 100.0 + 0.5) / 100.0;
	print "$value\n";
	if ($verboseQ) {
		print "\tcompositeNotes:\t$compositeNotes\n";
		print "\tseconds:\t$seconds\n";
	}
}



